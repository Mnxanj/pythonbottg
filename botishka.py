import sqlite3
import telebot
from telebot import types
import os

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = "6896892992:AAHHll2f4cwxis_1ykbOUQf750a6AmVyumU"
DB_NAME = "sqlite3.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)
booking_sessions = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        role TEXT CHECK (role IN ('client', 'restaurant')),
        registration_date TEXT
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS clients (
        client_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        name TEXT,
        phone TEXT,
        city TEXT,
        bookings_count INTEGER DEFAULT 0,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS restaurants (
        restaurant_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        name TEXT,
        location TEXT,
        photo_id TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS waiters (
        waiter_id INTEGER PRIMARY KEY AUTOINCREMENT,
        restaurant_id INTEGER,
        name TEXT,
        age INTEGER,
        photo_id TEXT,
        rating REAL DEFAULT 0.0,
        reviews_count INTEGER DEFAULT 0,
        FOREIGN KEY (restaurant_id) REFERENCES restaurants (restaurant_id)
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS bookings (
        booking_id INTEGER PRIMARY KEY AUTOINCREMENT,
        client_id INTEGER,
        waiter_id INTEGER,
        date TEXT,
        time TEXT,
        persons INTEGER,
        notes TEXT,
        tips REAL DEFAULT 0.0,
        FOREIGN KEY (client_id) REFERENCES clients (client_id),
        FOREIGN KEY (waiter_id) REFERENCES waiters (waiter_id)
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS reviews (
        review_id INTEGER PRIMARY KEY AUTOINCREMENT,
        booking_id INTEGER,
        rating INTEGER CHECK (rating BETWEEN 1 AND 5),
        comment TEXT,
        FOREIGN KEY (booking_id) REFERENCES bookings (booking_id)
    )
    ''')

    conn.commit()
    conn.close()

init_db()  # –°–æ–∑–¥–∞—ë–º –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_registered(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    if is_user_registered(user_id):
        show_main_menu(message)
    else:
        show_registration_choice(message)

# –í—ã–±–æ—Ä —Ä–æ–ª–∏ (–ö–ª–∏–µ–Ω—Ç/–†–µ—Å—Ç–æ—Ä–∞–Ω)
def show_registration_choice(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_client = types.KeyboardButton('üë§ –Ø –∫–ª–∏–µ–Ω—Ç')
    btn_restaurant = types.KeyboardButton('üè¢ –Ø —Ä–µ—Å—Ç–æ—Ä–∞–Ω')
    markup.add(btn_client, btn_restaurant)
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
        reply_markup=markup
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±—É–¥–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–æ)
def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –ó–¥–µ—Å—å –±—É–¥—É—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    bot.send_message(
        message.chat.id,
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=markup
    )

# =============================================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
# =============================================

@bot.message_handler(func=lambda message: message.text == 'üë§ –Ø –∫–ª–∏–µ–Ω—Ç')
def handle_client_choice(message):
    user_id = message.from_user.id
    if is_user_registered(user_id):
        show_main_menu(message)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å —Ä–æ–ª—å—é 'client'
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO users (user_id, role, registration_date) VALUES (?, ?, datetime('now'))",
        (user_id, 'client')
    )
    conn.commit()
    conn.close()

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    bot.send_message(message.chat.id, "üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    bot.register_next_step_handler(message, process_client_name)


def process_client_name(message):
    name = message.text.strip()
    if not name:
        bot.send_message(message.chat.id, "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return bot.register_next_step_handler(message, process_client_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –≤ –ë–î)
    user_data = {'name': name}

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_phone = types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    markup.add(btn_phone)
    bot.send_message(
        message.chat.id,
        "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, process_client_phone, user_data)


def process_client_phone(message, user_data):
    if message.contact:
        phone = message.contact.phone_number
    else:
        phone = message.text.strip()
        if not phone.isdigit():
            bot.send_message(message.chat.id, "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return bot.register_next_step_handler(message, process_client_phone, user_data)

    user_data['phone'] = phone

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥
    bot.send_message(message.chat.id, "üåÜ –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    bot.register_next_step_handler(message, process_client_city, user_data)


def process_client_city(message, user_data):
    city = message.text.strip()
    if not city:
        bot.send_message(message.chat.id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return bot.register_next_step_handler(message, process_client_city, user_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO clients (user_id, name, phone, city) VALUES (?, ?, ?, ?)",
        (message.from_user.id, user_data['name'], user_data['phone'], city)
    )
    conn.commit()
    conn.close()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(message)
    bot.send_message(message.chat.id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


# =============================================
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
# =============================================

def show_main_menu(message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
    role = cursor.fetchone()[0]
    conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if role == 'client':
        markup.add(
            types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å'),
            types.KeyboardButton('üè¢ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã'),
            types.KeyboardButton('üìñ –ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π'),
            types.KeyboardButton('üèÜ –¢–æ–ø –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤')
        )
    else:
        # –ú–µ–Ω—é –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
        pass

    bot.send_message(
        message.chat.id,
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=markup
    )


# =============================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ—Ñ–∏–ª—å"
# =============================================

@bot.message_handler(func=lambda message: message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
def show_client_profile(message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute(
        "SELECT name, phone, city, bookings_count FROM clients WHERE user_id = ?",
        (user_id,)
    )
    data = cursor.fetchone()
    conn.close()

    if not data:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    name, phone, city, bookings = data
    profile_text = (
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"‚ñ™Ô∏è *–ò–º—è:* {name}\n"
        f"‚ñ™Ô∏è *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
        f"‚ñ™Ô∏è *–ì–æ—Ä–æ–¥:* {city}\n"
        f"‚ñ™Ô∏è *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:* {bookings}"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name"),
        types.InlineKeyboardButton("üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone"),
        types.InlineKeyboardButton("üåÜ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="edit_city"),
    )
    markup.add(types.InlineKeyboardButton("", callback_data="back_to_menu"))

    bot.send_message(
        message.chat.id,
        profile_text,
        parse_mode="Markdown",
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_') or call.data == 'back_to_menu')
def handle_profile_actions(call):
    if call.data == 'back_to_menu':
        show_main_menu(call.message)
    elif call.data == 'edit_name':
        bot.send_message(call.message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        bot.register_next_step_handler(call.message, update_client_name)
    elif call.data == 'edit_phone':
        bot.send_message(call.message.chat.id, "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(call.message, update_client_phone)
    elif call.data == 'edit_city':
        bot.send_message(call.message.chat.id, "üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
        bot.register_next_step_handler(call.message, update_client_city)

def update_client_name(message):
    new_name = message.text.strip()
    if not new_name:
        bot.send_message(message.chat.id, "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE clients SET name = ? WHERE user_id = ?",
        (new_name, message.from_user.id)
    )
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    show_client_profile(message)

def update_client_phone(message):
    new_phone = message.text.strip()
    if not new_phone:
        bot.send_message(message.chat.id, "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE clients SET phone = ? WHERE user_id = ?",
        (new_phone, message.from_user.id)
    )
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    show_client_profile(message)

def update_client_city(message):
    new_city = message.text.strip()
    if not new_city:
        bot.send_message(message.chat.id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE clients SET city = ? WHERE user_id = ?",
        (new_city, message.from_user.id)
    )
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "‚úÖ –ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    show_client_profile(message)


# =============================================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
# =============================================

@bot.message_handler(func=lambda message: message.text == 'üè¢ –Ø —Ä–µ—Å—Ç–æ—Ä–∞–Ω')
def handle_restaurant_choice(message):
    user_id = message.from_user.id
    if is_user_registered(user_id):
        show_main_menu(message)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å —Ä–æ–ª—å—é 'restaurant'
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO users (user_id, role, registration_date) VALUES (?, ?, datetime('now'))",
        (user_id, 'restaurant')
    )
    conn.commit()
    conn.close()

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    bot.send_message(message.chat.id, "üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:")
    bot.register_next_step_handler(message, process_restaurant_name)


def process_restaurant_name(message):
    name = message.text.strip()
    if not name:
        bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return bot.register_next_step_handler(message, process_restaurant_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data = {'name': name}

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_location = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)
    markup.add(btn_location)
    bot.send_message(
        message.chat.id,
        "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é):",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, process_restaurant_location, user_data)


def process_restaurant_location(message, user_data):
    if message.location:
        location = f"{message.location.latitude},{message.location.longitude}"
    else:
        location = message.text.strip()
        if not location:
            bot.send_message(message.chat.id, "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return bot.register_next_step_handler(message, process_restaurant_location, user_data)

    user_data['location'] = location

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    bot.send_message(message.chat.id, "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:")
    bot.register_next_step_handler(message, process_restaurant_photo, user_data)


def process_restaurant_photo(message, user_data):
    if not message.photo:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return bot.register_next_step_handler(message, process_restaurant_photo, user_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º file_id)
    photo_id = message.photo[-1].file_id
    user_data['photo_id'] = photo_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤ –ë–î
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO restaurants (user_id, name, location, photo_id) VALUES (?, ?, ?, ?)",
        (message.from_user.id, user_data['name'], user_data['location'], user_data['photo_id'])
    )
    restaurant_id = cursor.lastrowid

    # –¢—Ä–µ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã 1 –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
    bot.send_message(message.chat.id, "üßë‚Äçüç≥ –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∏–º—è:")
    bot.register_next_step_handler(message, process_waiter_name, restaurant_id)
    conn.commit()
    conn.close()


# =============================================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
# =============================================

def process_waiter_name(message, restaurant_id):
    name = message.text.strip()
    if not name:
        bot.send_message(message.chat.id, "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return bot.register_next_step_handler(message, process_waiter_name, restaurant_id)

    user_data = {'name': name, 'restaurant_id': restaurant_id}

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    bot.send_message(message.chat.id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:")
    bot.register_next_step_handler(message, process_waiter_age, user_data)


def process_waiter_age(message, user_data):
    age = message.text.strip()
    if not age.isdigit() or int(age) < 18:
        bot.send_message(message.chat.id, "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–æ—Ç 18 –ª–µ—Ç). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return bot.register_next_step_handler(message, process_waiter_age, user_data)

    user_data['age'] = int(age)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    bot.send_message(message.chat.id, "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:")
    bot.register_next_step_handler(message, process_waiter_photo, user_data)


def process_waiter_photo(message, user_data):
    if not message.photo:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return bot.register_next_step_handler(message, process_waiter_photo, user_data)

    photo_id = message.photo[-1].file_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –≤ –ë–î
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO waiters (restaurant_id, name, age, photo_id) VALUES (?, ?, ?, ?)",
        (user_data['restaurant_id'], user_data['name'], user_data['age'], photo_id)
    )
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "‚úÖ –û—Ñ–∏—Ü–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    show_main_menu(message)


# =============================================
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
# =============================================

def show_main_menu(message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
    role = cursor.fetchone()[0]
    conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if role == 'client':
        markup.add(
            types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å'),
            types.KeyboardButton('üè¢ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã'),
            types.KeyboardButton('üìñ –ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π'),
            types.KeyboardButton('üèÜ –¢–æ–ø –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤')
        )
    else:
        markup.add(
            types.KeyboardButton('üè† –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞'),
            types.KeyboardButton('üßë‚Äçüç≥ –û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã'),
            types.KeyboardButton('üí∞ –ò—Å—Ç–æ—Ä–∏—è —á–∞–µ–≤—ã—Ö')
        )

    bot.send_message(
        message.chat.id,
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=markup
    )


# =============================================
# –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
# =============================================

@bot.message_handler(func=lambda message: message.text == 'üè† –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
def show_restaurant_profile(message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute(
        "SELECT name, location, photo_id FROM restaurants WHERE user_id = ?",
        (user_id,)
    )
    data = cursor.fetchone()
    conn.close()

    if not data:
        bot.send_message(message.chat.id, "‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    name, location, photo_id = data
    profile_text = (
        f"üè¢ *–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞*\n\n"
        f"‚ñ™Ô∏è *–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n"
        f"‚ñ™Ô∏è *–õ–æ–∫–∞—Ü–∏—è:* {location}\n"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_restaurant_name"),
        types.InlineKeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="edit_restaurant_location"),
        types.InlineKeyboardButton("üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_restaurant_photo"),
    )
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç
    bot.send_photo(
        message.chat.id,
        photo_id,
        caption=profile_text,
        parse_mode="Markdown",
        reply_markup=markup
    )


# =============================================
# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ (–¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞)
# =============================================

@bot.message_handler(func=lambda message: message.text == 'üßë‚Äçüç≥ –û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã')
def show_waiters_list(message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    cursor.execute("SELECT restaurant_id FROM restaurants WHERE user_id = ?", (user_id,))
    restaurant_id = cursor.fetchone()[0]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
    cursor.execute(
        "SELECT waiter_id, name FROM waiters WHERE restaurant_id = ?",
        (restaurant_id,)
    )
    waiters = cursor.fetchall()
    conn.close()

    if not waiters:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
    markup = types.InlineKeyboardMarkup()
    for waiter in waiters:
        markup.add(
            types.InlineKeyboardButton(
                waiter[1],
                callback_data=f"waiter_{waiter[0]}"
            )
        )
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞", callback_data="add_waiter"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    bot.send_message(
        message.chat.id,
        "üßë‚Äçüç≥ –í–∞—à–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã:",
        reply_markup=markup
    )


# =============================================
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# =============================================

@bot.callback_query_handler(func=lambda call: call.data.startswith('waiter_info_'))
def show_waiter_details(call):
    waiter_id = call.data.split('_')[2]
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
    cursor.execute(
        """SELECT w.name, w.age, w.photo_id, w.rating, w.reviews_count, 
                  r.restaurant_id, r.name
           FROM waiters w
           JOIN restaurants r ON w.restaurant_id = r.restaurant_id
           WHERE w.waiter_id = ?""",
        (waiter_id,)
    )
    data = cursor.fetchone()
    conn.close()

    if not data:
        bot.answer_callback_query(call.id, "‚ùå –û—Ñ–∏—Ü–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    name, age, photo_id, rating, reviews, restaurant_id, restaurant_name = data
    info_text = (
        f"üßë‚Äçüç≥ *{name}*\n\n"
        f"üè¢ *–†–µ—Å—Ç–æ—Ä–∞–Ω:* {restaurant_name}\n"
        f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* {age}\n"
        f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {rating:.1f} ({reviews} –æ—Ç–∑—ã–≤–æ–≤)"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_waiter_{waiter_id}"),
        types.InlineKeyboardButton("üí∏ –û—Å—Ç–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ", callback_data=f"send_tips_{waiter_id}"),
    )
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_restaurant_{restaurant_id}"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    try:
        bot.send_photo(
            call.message.chat.id,
            photo_id,
            caption=info_text,
            parse_mode="Markdown",
            reply_markup=markup
        )
    except Exception as e:
        bot.send_message(
            call.message.chat.id,
            info_text,
            parse_mode="Markdown",
            reply_markup=markup
        )


# =============================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
# =============================================

@bot.callback_query_handler(func=lambda call: call.data.startswith('back_to_restaurant_'))
def back_to_restaurant(call):
    restaurant_id = call.data.split('_')[3]

    # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ show_restaurant_info
    class FakeMessage:
        def __init__(self):
            self.chat = call.message.chat
            self.message_id = call.message.message_id

    fake_msg = FakeMessage()

    # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π callback —Å –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    class FakeCall:
        def __init__(self):
            self.data = f"restaurant_{restaurant_id}"
            self.message = fake_msg

    fake_call = FakeCall()

    show_restaurant_info(fake_call)


# =============================================
# –†–∞–∑–¥–µ–ª "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã" –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
# =============================================

@bot.message_handler(func=lambda message: message.text == 'üè¢ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã')
def show_restaurants_list(message):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ (–ø–µ—Ä–≤—ã–µ 10)
    cursor.execute("SELECT restaurant_id, name, photo_id FROM restaurants LIMIT 10")
    restaurants = cursor.fetchall()
    conn.close()

    if not restaurants:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏
    markup = types.InlineKeyboardMarkup()
    for restaurant in restaurants:
        markup.add(
            types.InlineKeyboardButton(
                restaurant[1],
                callback_data=f"restaurant_{restaurant[0]}"
            )
        )
    markup.add(types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", switch_inline_query_current_chat=""))

    bot.send_message(
        message.chat.id,
        "üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã:",
        reply_markup=markup
    )


# =============================================
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# =============================================

@bot.callback_query_handler(func=lambda call: call.data.startswith('restaurant_'))
def show_restaurant_info(call):
    parts = call.data.split('_')
    if len(parts) < 2:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
        return

    restaurant_id = parts[1]
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
    cursor.execute(
        "SELECT name, location, photo_id FROM restaurants WHERE restaurant_id = ?",
        (restaurant_id,)
    )
    restaurant_data = cursor.fetchone()

    if not restaurant_data:
        bot.answer_callback_query(call.id, "‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        conn.close()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
    cursor.execute(
        "SELECT waiter_id, name FROM waiters WHERE restaurant_id = ?",
        (restaurant_id,)
    )
    waiters = cursor.fetchall()
    conn.close()

    name, location, photo_id = restaurant_data
    info_text = (
        f"üè¢ *{name}*\n\n"
        f"üìç *–ê–¥—Ä–µ—Å:* {location}\n"
        f"üßë‚Äçüç≥ *–û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã:* {len(waiters)}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
    markup = types.InlineKeyboardMarkup()
    for waiter in waiters:
        markup.add(
            types.InlineKeyboardButton(
                f"üßë‚Äçüç≥ {waiter[1]}",
                callback_data=f"waiter_info_{waiter[0]}"
            )
        )
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_restaurants"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    try:
        bot.send_photo(
            call.message.chat.id,
            photo_id,
            caption=info_text,
            parse_mode="Markdown",
            reply_markup=markup
        )
    except Exception as e:
        bot.send_message(
            call.message.chat.id,
            info_text,
            parse_mode="Markdown",
            reply_markup=markup
        )


# =============================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö
# =============================================

@bot.callback_query_handler(func=lambda call: call.data in ['back_to_menu', 'back_to_waiters', 'back_to_restaurants'])
def handle_back_buttons(call):
    if call.data == 'back_to_menu':
        show_main_menu(call.message)
    elif call.data == 'back_to_waiters':
        show_waiters_list(call.message)
    elif call.data == 'back_to_restaurants':
        show_restaurants_list(call.message)


# =============================================
# –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ (–∫–ª–∏–µ–Ω—Ç)
# =============================================

@bot.callback_query_handler(func=lambda call: call.data.startswith('restaurant_waiter_'))
def start_booking(call):
    waiter_id = call.data.split('_')[2]
    user_data = {'waiter_id': waiter_id}

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
    bot.send_message(
        call.message.chat.id,
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.06.2024):"
    )
    bot.register_next_step_handler(call.message, process_booking_date, user_data)


def process_booking_date(message, user_data):
    date = message.text.strip()
    if not date:
        bot.send_message(message.chat.id, "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return bot.register_next_step_handler(message, process_booking_date, user_data)

    user_data['date'] = date

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
    bot.send_message(
        message.chat.id,
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:30):"
    )
    bot.register_next_step_handler(message, process_booking_time, user_data)


def process_booking_time(message, user_data):
    time = message.text.strip()
    if not time:
        bot.send_message(message.chat.id, "‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return bot.register_next_step_handler(message, process_booking_time, user_data)

    user_data['time'] = time

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω
    bot.send_message(
        message.chat.id,
        "üë• –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:"
    )
    bot.register_next_step_handler(message, process_booking_persons, user_data)


def process_booking_persons(message, user_data):
    persons = message.text.strip()
    if not persons.isdigit() or int(persons) < 1:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
        return bot.register_next_step_handler(message, process_booking_persons, user_data)

    user_data['persons'] = int(persons)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    bot.send_message(
        message.chat.id,
        "üí¨ –ï—Å—Ç—å –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è? (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')"
    )
    bot.register_next_step_handler(message, process_booking_notes, user_data)


def process_booking_notes(message, user_data):
    notes = message.text if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else ""
    user_data['notes'] = notes

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_booking_{user_data['waiter_id']}"),
        types.InlineKeyboardButton("üí∏ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∏—Ç—å —á–∞–µ–≤—ã–µ", callback_data=f"prepay_tips_{user_data['waiter_id']}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")
    )

    booking_text = (
        f"üìù *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:*\n\n"
        f"‚ñ™Ô∏è –î–∞—Ç–∞: {user_data['date']}\n"
        f"‚ñ™Ô∏è –í—Ä–µ–º—è: {user_data['time']}\n"
        f"‚ñ™Ô∏è –ì–æ—Å—Ç–∏: {user_data['persons']}\n"
        f"‚ñ™Ô∏è –ü–æ–∂–µ–ª–∞–Ω–∏—è: {user_data['notes'] or '–Ω–µ—Ç'}"
    )

    bot.send_message(
        message.chat.id,
        booking_text,
        parse_mode="Markdown",
        reply_markup=markup
    )


# =============================================
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
# =============================================

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_booking_'))
def confirm_booking(call):
    waiter_id = call.data.split('_')[2]
    client_id = call.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω—å –≤ –ë–î
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO bookings (client_id, waiter_id, date, time, persons, notes) VALUES (?, ?, ?, ?, ?, ?)",
        (client_id, waiter_id, user_data['date'], user_data['time'], user_data['persons'], user_data['notes'])
    )
    conn.commit()
    conn.close()

    bot.answer_callback_query(call.id, "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
    bot.send_message(call.message.chat.id, "üéâ –í–∞—à —Å—Ç–æ–ª–∏–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!")


# =============================================
# –û—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ (–∫–ª–∏–µ–Ω—Ç)
# =============================================

@bot.callback_query_handler(func=lambda call: call.data.startswith('review_'))
def ask_review_rating(call):
    booking_id = call.data.split('_')[1]

    markup = types.InlineKeyboardMarkup()
    for i in range(1, 6):
        markup.add(types.InlineKeyboardButton("‚≠ê" * i, callback_data=f"set_rating_{booking_id}_{i}"))

    bot.send_message(
        call.message.chat.id,
        "‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ (1-5 –∑–≤–µ–∑–¥):",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('set_rating_'))
def save_review(call):
    _, _, booking_id, rating = call.data.split('_')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –ë–î
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO reviews (booking_id, rating) VALUES (?, ?)",
        (booking_id, rating)
    )
    conn.commit()
    conn.close()

    bot.answer_callback_query(call.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")


# =============================================
# –ß–∞–µ–≤—ã–µ (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
# =============================================

@bot.callback_query_handler(func=lambda call: call.data.startswith(('prepay_tips_', 'send_tips_')))
def handle_tips(call):
    waiter_id = call.data.split('_')[2]
    bot.send_message(
        call.message.chat.id,
        "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∞–µ–≤—ã—Ö:"
    )
    bot.register_next_step_handler(call.message, process_tips_amount, waiter_id)


def process_tips_amount(message, waiter_id):
    amount = message.text.strip()
    if not amount.isdigit() or int(amount) < 1:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return bot.register_next_step_handler(message, process_tips_amount, waiter_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–æ–Ω—å –∏–ª–∏ –∑–∞–ø–∏—Å—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE bookings SET tips = ? WHERE waiter_id = ?",
        (amount, waiter_id)
    )
    conn.commit()
    conn.close()

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ß–∞–µ–≤—ã–µ {amount}‚ÇΩ —É—á—Ç–µ–Ω—ã!"
    )


@bot.message_handler(func=lambda message: message.text == 'üìñ –ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π')
def show_booking_history(message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å –∏–º–µ–Ω–∞–º–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    cursor.execute('''
                   SELECT b.booking_id, w.name, r.name, b.date, b.time, b.tips
                   FROM bookings b
                            JOIN waiters w ON b.waiter_id = w.waiter_id
                            JOIN restaurants r ON w.restaurant_id = r.restaurant_id
                   WHERE b.client_id = ?
                   ORDER BY b.date DESC
                   ''', (user_id,))

    bookings = cursor.fetchall()
    conn.close()

    if not bookings:
        bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
    send_bookings_page(message.chat.id, bookings, page=0)


def send_bookings_page(chat_id, bookings, page):
    start_idx = page * 5
    end_idx = start_idx + 5
    current_bookings = bookings[start_idx:end_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üìñ *–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n"
    for booking in current_bookings:
        booking_id, waiter_name, restaurant_name, date, time, tips = booking
        text += (
            f"‚ñ™Ô∏è #{booking_id}\n"
            f"–û—Ñ–∏—Ü–∏–∞–Ω—Ç: {waiter_name}\n"
            f"–†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_name}\n"
            f"–î–∞—Ç–∞: {date} {time}\n"
            f"–ß–∞–µ–≤—ã–µ: {tips or 0}‚ÇΩ\n"
            f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
        )

    # –ö–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    for booking in current_bookings:
        booking_id = booking[0]
        markup.add(
            types.InlineKeyboardButton(
                f"‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ #{booking_id}",
                callback_data=f"booking_details_{booking_id}"
            )
        )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if page > 0:
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bookings_page_{page - 1}"))
    if end_idx < len(bookings):
        markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"bookings_page_{page + 1}"))

    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu"))

    bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('booking_details_'))
def show_booking_details(call):
    booking_id = call.data.split('_')[2]
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute('''
                   SELECT b.date,
                          b.time,
                          b.persons,
                          b.notes,
                          b.tips,
                          w.name,
                          w.photo_id,
                          r.name
                   FROM bookings b
                            JOIN waiters w ON b.waiter_id = w.waiter_id
                            JOIN restaurants r ON w.restaurant_id = r.restaurant_id
                   WHERE b.booking_id = ?
                   ''', (booking_id,))

    booking = cursor.fetchone()
    conn.close()

    if not booking:
        bot.answer_callback_query(call.id, "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"üìù *–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
        f"‚ñ™Ô∏è –î–∞—Ç–∞: {booking[0]}\n"
        f"‚ñ™Ô∏è –í—Ä–µ–º—è: {booking[1]}\n"
        f"‚ñ™Ô∏è –ì–æ—Å—Ç–µ–π: {booking[2]}\n"
        f"‚ñ™Ô∏è –ü–æ–∂–µ–ª–∞–Ω–∏—è: {booking[3] or '–Ω–µ—Ç'}\n"
        f"‚ñ™Ô∏è –ß–∞–µ–≤—ã–µ: {booking[4] or 0}‚ÇΩ\n"
        f"üßë‚Äçüç≥ –û—Ñ–∏—Ü–∏–∞–Ω—Ç: {booking[5]}\n"
        f"üè¢ –†–µ—Å—Ç–æ—Ä–∞–Ω: {booking[7]}"
    )

    # –ö–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_{booking_id}"),
        types.InlineKeyboardButton("üí∏ –î–æ–±–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ", callback_data=f"add_tips_{booking_id}"),
    )
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_bookings"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if booking[6]:
        try:
            bot.send_photo(
                call.message.chat.id,
                booking[6],
                caption=text,
                parse_mode="Markdown",
                reply_markup=markup
            )
            return
        except:
            pass

    bot.send_message(call.message.chat.id, text, parse_mode="Markdown", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üèÜ –¢–æ–ø –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤')
def show_top_waiters(message):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    cursor.execute('''
                   SELECT w.waiter_id, w.name, w.photo_id, w.rating, w.reviews_count, r.name
                   FROM waiters w
                            JOIN restaurants r ON w.restaurant_id = r.restaurant_id
                   WHERE w.reviews_count > 0
                   ORDER BY w.rating DESC, w.reviews_count DESC LIMIT 10
                   ''')

    waiters = cursor.fetchall()
    conn.close()

    if not waiters:
        bot.send_message(message.chat.id, "üìä –†–µ–π—Ç–∏–Ω–≥ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    send_waiters_page(message.chat.id, waiters, page=0)


def send_waiters_page(chat_id, waiters, page):
    start_idx = page * 5
    end_idx = start_idx + 5
    current_waiters = waiters[start_idx:end_idx]

    text = "üèÜ *–¢–æ–ø –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤:*\n\n"
    for idx, waiter in enumerate(current_waiters, start=1):
        waiter_id, name, _, rating, reviews, restaurant = waiter
        text += (
            f"{start_idx + idx}. {name}\n"
            f"‚≠ê {rating:.1f} ({reviews} –æ—Ç–∑—ã–≤–æ–≤)\n"
            f"üè¢ {restaurant}\n"
            f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
        )

    markup = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
    for waiter in current_waiters:
        markup.add(
            types.InlineKeyboardButton(
                f"üßë‚Äçüç≥ {waiter[1]}",
                callback_data=f"waiter_info_{waiter[0]}"
            )
        )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if page > 0:
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"top_page_{page - 1}"))
    if end_idx < len(waiters):
        markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"top_page_{page + 1}"))

    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu"))

    bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üí∞ –ò—Å—Ç–æ—Ä–∏—è —á–∞–µ–≤—ã—Ö')
def show_tips_history(message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞–µ–≤—ã—Ö –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    cursor.execute('''
                   SELECT t.date, w.name, t.amount
                   FROM (SELECT b.date, b.waiter_id, b.tips as amount
                         FROM bookings b
                                  JOIN waiters w ON b.waiter_id = w.waiter_id
                                  JOIN restaurants r ON w.restaurant_id = r.restaurant_id
                         WHERE r.user_id = ?
                           AND b.tips > 0
                         UNION ALL
                         SELECT datetime('now') as date, waiter_id, tips as amount
                         FROM waiter_tips
                         WHERE restaurant_id IN (
                             SELECT restaurant_id FROM restaurants WHERE user_id = ?
                             )) t
                            JOIN waiters w ON t.waiter_id = w.waiter_id
                   ORDER BY t.date DESC LIMIT 50
                   ''', (user_id, user_id))

    tips = cursor.fetchall()
    conn.close()

    if not tips:
        bot.send_message(message.chat.id, "üí∏ –ò—Å—Ç–æ—Ä–∏—è —á–∞–µ–≤—ã—Ö –ø—É—Å—Ç–∞.")
        return

    send_tips_page(message.chat.id, tips, page=0)


def send_tips_page(chat_id, tips, page):
    start_idx = page * 7
    end_idx = start_idx + 7
    current_tips = tips[start_idx:end_idx]

    text = "üí∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞–µ–≤—ã–µ:*\n\n"
    for tip in current_tips:
        date, waiter_name, amount = tip
        text += f"‚ñ™Ô∏è {date}: {waiter_name} ‚Äî {amount}‚ÇΩ\n"

    markup = types.InlineKeyboardMarkup()

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if page > 0:
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tips_page_{page - 1}"))
    if end_idx < len(tips):
        markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"tips_page_{page + 1}"))

    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu"))

    bot.send_message(chat_id, text, reply_markup=markup)


# =============================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å" —É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
# =============================================



# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ==========
@bot.callback_query_handler(func=lambda call: call.data.startswith('book_waiter_'))
def start_booking(call):
    waiter_id = call.data.split('_')[2]
    user_id = call.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    booking_sessions[user_id] = {
        'waiter_id': waiter_id,
        'step': 'date'
    }
    
    bot.send_message(
        call.message.chat.id,
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):",
        reply_markup=types.ForceReply()
    )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.from_user.id in booking_sessions)
def handle_booking_steps(message):
    user_id = message.from_user.id
    session = booking_sessions[user_id]
    
    try:
        if session['step'] == 'date':
            process_booking_date(message, user_id)
        elif session['step'] == 'time':
            process_booking_time(message, user_id)
        elif session['step'] == 'persons':
            process_booking_persons(message, user_id)
        elif session['step'] == 'notes':
            process_booking_notes(message, user_id)
        elif session['step'] == 'tips':
            process_tips_amount(message, user_id)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        del booking_sessions[user_id]

def process_booking_date(message, user_id):
    date = message.text.strip()
    if not date or len(date) != 10 or date[2] != '.' or date[5] != '.':
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return
        
    booking_sessions[user_id]['date'] = date
    booking_sessions[user_id]['step'] = 'time'
    
    bot.send_message(
        message.chat.id,
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ß–ß:–ú–ú):",
        reply_markup=types.ForceReply()
    )

def process_booking_time(message, user_id):
    time = message.text.strip()
    if not time or len(time) != 5 or time[2] != ':':
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
        return
        
    booking_sessions[user_id]['time'] = time
    booking_sessions[user_id]['step'] = 'persons'
    
    bot.send_message(
        message.chat.id,
        "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:",
        reply_markup=types.ForceReply()
    )

def process_booking_persons(message, user_id):
    try:
        persons = int(message.text.strip())
        if persons < 1:
            raise ValueError
    except:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
        return
        
    booking_sessions[user_id]['persons'] = persons
    booking_sessions[user_id]['step'] = 'notes'
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    
    bot.send_message(
        message.chat.id,
        "üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=markup
    )

def process_booking_notes(message, user_id):
    notes = message.text if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else ""
    booking_sessions[user_id]['notes'] = notes
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_booking"),
        types.InlineKeyboardButton("üí∏ –î–æ–±–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ", callback_data="add_tips")
    )
    markup.row(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking"))
    
    session = booking_sessions[user_id]
    text = (
        "üìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        f"–î–∞—Ç–∞: {session['date']}\n"
        f"–í—Ä–µ–º—è: {session['time']}\n"
        f"–ì–æ—Å—Ç–µ–π: {session['persons']}\n"
        f"–ü–æ–∂–µ–ª–∞–Ω–∏—è: {session.get('notes', '–Ω–µ—Ç')}"
    )
    
    bot.send_message(
        message.chat.id,
        text,
        reply_markup=markup
    )
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    bot.send_message(message.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=types.ReplyKeyboardRemove())


# =============================================
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
# =============================================


# ========== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ==========
@bot.callback_query_handler(func=lambda call: call.data == 'confirm_booking')
def confirm_booking(call):
    user_id = call.from_user.id
    if user_id not in booking_sessions:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
        
    session = booking_sessions[user_id]
    
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        cursor.execute(
            "INSERT INTO bookings (client_id, waiter_id, date, time, persons, notes) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, session['waiter_id'], session['date'], session['time'], session['persons'], session.get('notes', ''))
        )
        
        cursor.execute(
            "UPDATE clients SET bookings_count = bookings_count + 1 WHERE user_id = ?",
            (user_id,)
        )
        
        conn.commit()
        
        bot.answer_callback_query(call.id, "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
        bot.send_message(call.message.chat.id, "üéâ –í–∞—à —Å—Ç–æ–ª–∏–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        print(f"–û—à–∏–±–∫–∞: {e}")
        
    finally:
        cursor.close()
        conn.close()

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
            
        except Exception as e:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
            bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
        finally:
            if user_id in booking_sessions:
                del booking_sessions[user_id]
            if conn:
                conn.close()

# ========== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö ==========

@bot.callback_query_handler(func=lambda call: call.data == 'add_tips')
def add_tips(call):
    user_id = call.from_user.id

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if user_id not in booking_sessions:
        booking_sessions[user_id] = {'step': '', 'tips': 0}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é

    booking_sessions[user_id]['step'] = 'tips'
    bot.answer_callback_query(call.id)

    bot.send_message(
        call.message.chat.id,
        "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∞–µ–≤—ã—Ö (—Ä—É–±):",
        reply_markup=types.ForceReply()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    bot.register_next_step_handler(call.message, process_tips_amount, user_id)


def process_tips_amount(message, user_id):
    try:
        amount = int(message.text.strip())
        if amount < 1:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user_id not in booking_sessions:
        booking_sessions[user_id] = {'step': '', 'tips': 0}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

    booking_sessions[user_id]['tips'] = amount

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —á–∞–µ–≤—ã–º–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å —á–∞–µ–≤—ã–º–∏", callback_data="confirm_with_tips"))

    bot.send_message(
        message.chat.id,
        f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —á–∞–µ–≤—ã–µ: {amount}‚ÇΩ\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:",
        reply_markup=markup
    )

def process_tips_amount(message, user_id):
    try:
        amount = int(message.text.strip())
        if amount < 1:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
    if user_id not in booking_sessions:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return

    booking_sessions[user_id]['tips'] = amount

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —á–∞–µ–≤—ã–º–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å —á–∞–µ–≤—ã–º–∏", callback_data="confirm_with_tips"))

    bot.send_message(
        message.chat.id,
        f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —á–∞–µ–≤—ã–µ: {amount}‚ÇΩ\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:",
        reply_markup=markup
    )
@bot.callback_query_handler(func=lambda call: call.data == 'confirm_with_tips')
def confirm_with_tips(call):
    user_id = call.from_user.id
    if user_id not in booking_sessions:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
        
    session = booking_sessions[user_id]
    
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO bookings (client_id, waiter_id, date, time, persons, notes, tips) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (user_id, session['waiter_id'], session['date'], session['time'], 
             session['persons'], session.get('notes', ''), session['tips']))
        
        cursor.execute(
            "UPDATE clients SET bookings_count = bookings_count + 1 WHERE user_id = ?",
            (user_id,)
        )
        conn.commit()
        
        bot.answer_callback_query(call.id, "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —á–∞–µ–≤—ã–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
        bot.send_message(
            call.message.chat.id,
            f"üéâ –í–∞—à —Å—Ç–æ–ª–∏–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω! –ß–∞–µ–≤—ã–µ: {session['tips']}‚ÇΩ"
        )
# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
            
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
        bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
    finally:
        if user_id in booking_sessions:
            del booking_sessions[user_id]
        if conn:
            conn.close()


# =============================================
# –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
# =============================================
@bot.callback_query_handler(func=lambda call: call.data == 'cancel_booking')
def cancel_booking(call):
    user_id = call.from_user.id
    if user_id in booking_sessions:
        del booking_sessions[user_id]
        
    bot.answer_callback_query(call.id, "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    bot.send_message(call.message.chat.id, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass




# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()
